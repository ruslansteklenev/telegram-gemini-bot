import asyncio
import logging
import os
from io import BytesIO
from asyncio import to_thread
from tempfile import NamedTemporaryFile

# –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
from flask import Flask
from threading import Thread

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode, ChatAction
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

from PIL import Image

import google.generativeai as genai

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not TELEGRAM_BOT_TOKEN or not GEMINI_API_KEY:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å TELEGRAM_BOT_TOKEN –∏ GEMINI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")

# --- –ü–†–û–ú–¢–´ –î–õ–Ø –ú–û–î–ï–õ–ò ---
SYSTEM_PROMPT = "–¢—ã ‚Äî —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram-—á–∞—Ç–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –∏—Ö –≤–æ–ø—Ä–æ—Å—ã. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –±–æ–ª–µ–µ –∂–∏–≤—ã–º."
AUDIO_PROMPT = "–¢—ã ‚Äî —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram-—á–∞—Ç–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –∏—Ö –≤–æ–ø—Ä–æ—Å—ã. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –±–æ–ª–µ–µ –∂–∏–≤—ã–º."
IMAGE_PROMPT = "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –¥–∞–π –µ–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ, –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.–µ—Å–ª–∏ —Ç–µ—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–≤–æ–¥–∏ —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å–∫–∏–π —è–∑—ã–∫,—Ç–æ –ø–µ—Ä–µ–≤–µ–¥–∏ –µ–≥–æ. –û–ø–∏—à–∏, —á—Ç–æ –Ω–∞ –Ω–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∫–∞–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –∫–∞–∫–∞—è –æ–±—â–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞. üé®"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Gemini API
genai.configure(api_key=GEMINI_API_KEY)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ Gemini
generation_config = {"temperature": 0.7}
safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
]

# –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å Gemini
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞ –º–æ–¥–µ–ª—å "gemini-2.5-flash" –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å.
# –ï—Å–ª–∏ –±—É–¥—É—Ç –æ—à–∏–±–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ "gemini-1.5-flash".
model = genai.GenerativeModel(
    model_name="gemini-2.5-flash",
    generation_config=generation_config,
    safety_settings=safety_settings,
    system_instruction=SYSTEM_PROMPT,
)

user_chat_sessions = {}

default_properties = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=default_properties)
dp = Dispatcher()


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}! –Ø ‚Äî —Ç–≤–æ–π —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. ü§ñ\n\n–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

@dp.message(Command("help"))
async def command_help_handler(message: Message) -> None:
    help_text = (
        "–Ø ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ Gemini.\n\n"
        "‚Äì –Ø –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Ç–≤–æ–∏ **—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è**, –ø–æ–º–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞.\n"
        "‚Äì –Ø **—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è** –∏ –∏–∑–ª–∞–≥–∞—é –∏—Ö —Å—É—Ç—å.\n"
        "‚Äì –Ø **–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–Ω–µ –ø—Ä–∏—à–ª–µ—à—å. –ú–æ–∂–µ—à—å –¥–∞–∂–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ –≤ –ø–æ–¥–ø–∏—Å–∏!\n\n"
        f"{hbold('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:')}\n"
        "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/new - –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"
    )
    await message.answer(help_text)

@dp.message(Command("new"))
async def command_new_handler(message: Message) -> None:
    user_id = message.from_user.id
    if user_id in user_chat_sessions:
        del user_chat_sessions[user_id]
        await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞! üìù")
    else:
        await message.answer("–î–∏–∞–ª–æ–≥ –∏ —Ç–∞–∫ –ø—É—Å—Ç. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å! üòä")


@dp.message(F.photo)
async def image_handler(message: types.Message):
    try:
        await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)

        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        downloaded_file = BytesIO()
        await bot.download_file(file_info.file_path, destination=downloaded_file)
        
        image = Image.open(downloaded_file)
        user_prompt = message.caption if message.caption else IMAGE_PROMPT
        contents = [user_prompt, image]

        logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Gemini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        response = await model.generate_content_async(contents)
        logging.info("–û—Ç–≤–µ—Ç –æ—Ç Gemini –ø–æ–ª—É—á–µ–Ω.")
        
        await message.reply(response.text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. üñºÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.message(F.voice)
async def voice_message_handler(message: types.Message):
    uploaded_file = None
    temp_file_path = None
    try:
        await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
        voice = message.voice
        file_info = await bot.get_file(voice.file_id)
        with NamedTemporaryFile(suffix=".ogg", delete=False) as temp_file:
            await bot.download_file(file_info.file_path, destination=temp_file)
            temp_file_path = temp_file.name
        logging.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file_path}")
        uploaded_file = await to_thread(
            genai.upload_file, path=temp_file_path, mime_type=voice.mime_type or "audio/ogg"
        )
        logging.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ò–º—è –≤ Gemini: {uploaded_file.name}")
        response = await model.generate_content_async([AUDIO_PROMPT, uploaded_file])
        await message.reply(response.text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. üò• –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        if uploaded_file:
            try:
                logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {uploaded_file.name} –∏–∑ Gemini...")
                await to_thread(genai.delete_file, name=uploaded_file.name)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {uploaded_file.name} –∏–∑ Gemini: {e}")
        if temp_file_path and os.path.exists(temp_file_path):
            os.remove(temp_file_path)
            logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_file_path} —É–¥–∞–ª–µ–Ω.")


@dp.message(F.text)
async def gemini_text_handler(message: types.Message) -> None:
    user_id = message.from_user.id
    if user_id not in user_chat_sessions:
        user_chat_sessions[user_id] = model.start_chat()
    chat_session = user_chat_sessions[user_id]
    try:
        await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
        response = await chat_session.send_message_async(message.text)
        await message.answer(response.text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {e}")
        await message.answer("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —à–æ–∫–æ–ª–∞–¥–∫–∏. üç´ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")


# –ù–û–í–û–ï: –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ Render
app = Flask(__name__)

@app.route('/')
def index():
    return "I am alive!"

def run_web_server():
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
# ----------------------------------------------------


async def main() -> None:
    # –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_web_server).start()

    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")